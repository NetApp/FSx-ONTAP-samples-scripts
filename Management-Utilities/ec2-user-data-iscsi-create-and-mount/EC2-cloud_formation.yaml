
AWSTemplateFormatVersion: '2010-09-09'
Description: Launch EC2 instance with user data script downloaded from Github and dynamic parameters
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - OperationSystem
          - InstanceType
          - InstanceName
          - KeyName
          - ImageId
          - VpcId
          - SubnetId
          - ManagedPolicyArn
      - Label:
          default: "FSxN Configuration"
        Parameters:
          - SecretName
          - AWSRegion
          - ManagementEndpointIP
          - VolumeName
          - VolumeSize
          - SvmName
          - DriveLetter
      - Label:
          default: "Networking"
        Parameters:
          - CidrIp
      - Label:
          default: "User Data Scripts"
        Parameters:
          - LinuxUserDataUrl
          - WindowsUserDataUrl
    ParameterLabels:
      OperationSystem:
        default: "Operating System"
      InstanceType:
        default: "Instance Type"
      InstanceName:
        default: "Instance Name"
      KeyName:
        default: "Key Pair Name"
      ImageId:
        default: "AMI ID"
      VpcId:
        default: "VPC ID"
      SubnetId:
        default: "Subnet ID"
      SecretName:
        default: "AWS Secret Name"
      AWSRegion:
        default: "AWS Region"
      ManagementEndpointIP:
        default: "Management Endpoint IP"
      VolumeName:
        default: "Volume Name"
      VolumeSize:
        default: "Volume Size (GiB)"
      SvmName:
        default: "SVM Name"
      DriveLetter:
        default: "Drive Letter (Windows Only)"
      CidrIp:
        default: "CIDR IP for SSH/RDP Access"
      LinuxUserDataUrl:
        default: "Linux User Data Script URL"
      WindowsUserDataUrl:
        default: "Windows User Data Script URL"
      ManagedPolicyArn:
        default: "IAM Managed Policy ARN"

Parameters:
  OperationSystem:
    Type: String
    AllowedValues:
      - Linux
      - Windows
  InstanceType:
    Type: String
    Default: t3.large
    Description: EC2 instance type
  InstanceName:
    Type: String
    Description: EC2 instance name
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for the instance
    AllowedValues:
      # Amazon Linux 2023 Kernel-6.1 AMI (us-east-1)
      - ami-0b09ffb6d8b58ca91
      # Microsoft Windows Server 2025 Base (us-east-1) 
      - ami-0e3c2921641a4a215
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID
  SecretName:
    Type: String
    Description: Aws Secret name
  AWSRegion:
    Type: String
    Description: AWS Secret region(in which you have yours secret)
  ManagementEndpointIP:
    Type: String
    Description: Management endpoint IP Address of your FSxN
  VolumeName:
    Type: String
    Description: Volume Name
  VolumeSize:
    Type: Number
    Description: Volume Size in GiB
  SvmName:
    Type: String
    Default: fsx
    Description: SVM Name
  DriveLetter:
    Type: String
    Default: d
    Description: Drive Letter - valid for Windows only
  CidrIp:
    Type: String
    Description: CIDR IP for SSH access to the instance
  LinuxUserDataUrl:
    Type: String
    Default: https://raw.githubusercontent.com/NetApp/FSx-ONTAP-samples-scripts/refs/heads/main/Management-Utilities/ec2-user-data-iscsi-create-and-mount/linux_userData.sh
    Description: URL to Linux user data script
  WindowsUserDataUrl:
    Type: String
    Default: https://raw.githubusercontent.com/NetApp/FSx-ONTAP-samples-scripts/refs/heads/main/Management-Utilities/ec2-user-data-iscsi-create-and-mount/windows_userData.ps1
    Description: URL to Windows user data script
  ManagedPolicyArn:
    Type: String
    Description: IAM managed policy ARN to attach to the EC2 instance role
Conditions:
  IsLinux: !Equals [ !Ref OperationSystem, "Linux" ]
  IsWindows: !Equals [ !Ref OperationSystem, "Windows" ]
  
Resources:
  EC2InstanceSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the EC2 instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !If
            - IsLinux
            - 22
            - 3389
          ToPort: !If
            - IsLinux
            - 22
            - 3389
          CidrIp: !Ref CidrIp
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref ManagedPolicyArn

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref EC2InstanceSecurityGroup
      SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: !Ref InstanceName
      UserData: !If
        - IsLinux
        - Fn::Base64: !Sub |
            #!/bin/bash
            curl -o /tmp/userdata-script.sh ${LinuxUserDataUrl}
            chmod +x /tmp/userdata-script.sh
            # Pass parameters to the script
            /tmp/userdata-script.sh "${SecretName}" "${AWSRegion}" "${ManagementEndpointIP }" "${VolumeName}" "${VolumeSize}" "${SvmName}"
        - Fn::Base64: !Sub |
            <powershell>
            Invoke-WebRequest -Uri ${WindowsUserDataUrl} -OutFile C:\userdata-script.ps1
            (Get-Content 'C:\userdata-script.ps1') | Where-Object { $_ -notmatch '^<powershell>$|^</powershell>$' } | Set-Content 'C:\userdata-script.ps1'
            powershell.exe -ExecutionPolicy Bypass -File C:\userdata-script.ps1 -SecretIdParam "${SecretName}" -FSxNAdminIpParam "${ManagementEndpointIP }" -VolumeNameParam "${VolumeName}" -VolumeSizeParam "${VolumeSize}" -DriveLetterParam "${DriveLetter}" -SvmNameParam "${SvmName}"
            </powershell>
Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref MyEC2Instance