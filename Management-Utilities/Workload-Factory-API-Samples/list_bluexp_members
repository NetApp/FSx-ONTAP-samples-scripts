#!/bin/bash
#
# This script is used to list all the BlueXP members that are
# associated with the BlueXP account.
#
# It is dependent on the 'wf_utils' file that is included in this repo. That
# file contains the 'get_token' function that is used to obtain a valid
# access token that is needed to run the Workload Factory APIs. The file needs
# to either be in the command search path or in the current directory.
################################################################################

################################################################################
# Display usage information then exits the script.
################################################################################
usage () {
  cat >&2 <<EOF
This script is used to list all the BlueXP members that are
associated with the BlueXP account.

Usage is: $(basename $0) -t refresh_token -u bluexp_account_uuid

Where: refresh_token    - Is a refresh token used to obtain an access token needed
                          to run the Workload Factory APIs. You can obtain a refresh
                          token by going to https://services.cloud.netapp.com/refresh-token
       bluexp_account_uuid - The BlueXP account UUID to list the members for. You can
                             find all the accounts you have access to by running the
                             "list_bluexp_accts" script.

Note, instead of passing parameters on the command line, you can set the
following environment variables instead:

    export REFRESH_TOKEN=<refresh_token>
    export BLUEXP_ACCOUNT_UUID=<bluexp_account_uuid>
EOF
  exit 1
}

tmpout=/tmp/list_accounts-out.$$
tmperr=/tmp/list_accounts-err.$$
trap 'rm -f $tmpout $tmperr' exit

while getopts ht:u: opt; do
  case $opt in
    t) REFRESH_TOKEN="$OPTARG" ;;
    u) BLUEXP_ACCOUNT_UUID="$OPTARG" ;;
    *) usage ;;
  esac
done
#
# Source the wf_utils file.
wf_utils=$(command -v wf_utils)
if [ -z "$wf_utils" ]; then
  if [ ! -x "./wf_utils" ]; then
    cat <<EOF >&2
Error: The 'wf_utils' script was not found in the current directory or in the command search path.
It is required to run this script. You can download it from:
https://github.com/NetApp/FSx-ONTAP-samples-scripts/tree/main/Management-Utilities/Workload-Factory-API-Samples
EOF
    exit 1
  else
    wf_utils=./wf_utils
  fi
fi
. "$wf_utils"
#
# Check that all the parameters are set.
if [ -z "$REFRESH_TOKEN" ]; then
  cat >&2 <<EOF
Error: A BlueXP refresh tokon is required to run this script.
Can you be obtain from this web page:

    https://services.cloud.netapp.com/refresh-token

EOF
  usage
fi

if [ -z "$BLUEXP_ACCOUNT_UUID" ]; then
  cat >&2 <<EOF
Error: A BlueXP account UUID is required to run this script.
You can see the list of accounts you have access to by running the "list_bluexp_accts" script
found in this GitHub repository: https://github.com/NetApp/FSx-ONTAP-samples-scripts/tree/main/Management-Utilities/Workload-Factory-API-Samples

EOF
  usage
fi
#
# Check that the required commands are available.
for cmd in jq curl; do
  if ! command -v $cmd &> /dev/null; then
    echo "Error: The required command '$cmd' was not found. Please install it." >&2
    exit 1
  fi
done

token=$(get_token)
if [ -z "$token" ]; then
  echo "Error: Failed to obtain an access token. Exiting." >&2
  exit 1
fi

run_curl GET "$token" "https://api.bluexp.netapp.com/v1/management/organizations/$BLUEXP_ACCOUNT_UUID/users?limit=1000&filter=userType%20ne%20%27agent%27" $tmpout $tmperr "" "application/vnd.netapp.bxp.users.extended+json"
count=$(jq -r '.count' $tmpout 2> /dev/null)
if [[ "$count" == 0 ]]; then
  echo "No members found for the specified BlueXP account UUID: $BLUEXP_ACCOUNT_UUID." >&2
  echo "Did you provide the UUID or the iD? This script needs the UUID." >&2
  exit 0
fi 

if jq -r '.items[] | .name + "," + if(.userType == "user") then .userType + "," + .id else .userType + "," + .auth0Id end + "," + .email' $tmpout > $tmperr; then
  cat $tmperr | sort -f | column -s, -t -N Name,Type,ID,Email
else
  echo "Error: Failed to parse the response from the API." >&2
  exit 1
fi
