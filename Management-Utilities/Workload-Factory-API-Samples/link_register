#!/bin/bash
#
################################################################################
# This script is used to register a Lambda function as an Workload Factory link.
#
# It is dependent on the 'wf_utils' file that is included in this repo. That
# file contains the 'get_token' function that is used to obtain a valid
# access token that is needed to run the Workload Factory APIs. The file needs
# to either be in the command search path or in the current directory.
################################################################################
#
################################################################################
# This function displays the usage of this script and exits.
################################################################################
usage() {
  cat >&2 <<EOF
This script is used to register a Lambda function as an Workload Factory link.

usage: $(basename $0) -t refresh_token -a blueXP_account_ID -n Name -l Lambda_ARN

Where: refresh_token - Is a refresh token used to obtain an access token needed
                       to run the Workload Factory APIs. You can obtain a refresh
                       token by going to https://services.cloud.netapp.com/refresh-token
       blueXP_account_ID - Is the BlueXP account ID. Run 'list_bluexp_accts' to get a
                           list of accounts you have access to.
       Name - Is the name you want associated with the Link within the Workload Factory UI.
       Lambda_ARN - Is the ARN of the AWS Lambda function.

Instead of passing parameters on the command line, you can set the
following environment variables:

    export REFRESH_TOKEN=<refresh_token>
    export BLUEXP_ACCOUNT_ID=<blueXP_account_ID>
EOF
  exit 1
}

################################################################################
# Main logic starts here.
################################################################################

tmpout=$(mktemp /tmp/link_register-out.XXXXXX)
tmperr=$(mktemp /tmp/link_register-err.XXXXXX)
trap 'rm -f $tmpout $tmperr' exit
#
# Source the wf_utils file.
wf_utils=$(command -v wf_utils)
if [ -z "$wf_utils" ]; then
  if [ ! -x "./wf_utils" ]; then
    cat >&2 <<EOF
Error: The 'wf_utils' script was not found in the current directory or in the command search path.
It is required to run this script. You can download it from:
https://github.com/NetApp/FSx-ONTAP-samples-scripts/tree/main/Management-Utilities/Workload-Factory-API-Samples
EOF
    exit 1
  else
    wf_utils=./wf_utils
  fi
fi
. "$wf_utils"
#
# Parse the command line options.
while getopts "ht:a:l:n:" opt; do
  case $opt in
    t) REFRESH_TOKEN="$OPTARG" ;;
    a) BLUEXP_ACCOUNT_ID="$OPTARG" ;;
    l) LAMBDA_ARN="$OPTARG" ;;
    n) NAME="$OPTARG" ;;
    *) usage ;;
  esac
done
#
# Declare an array of required options and the error message to display if they are not set.
declare -A required_options
required_options["REFRESH_TOKEN"]='Error: A BlueXP refresh tokon is required to run this script. It can be obtain from this web page:
  https://services.cloud.netapp.com/refresh-token\n\n'
required_options["BLUEXP_ACCOUNT_ID"]='Error: A BlueXP account ID is required to run this script.
You can get the list of accounts you have access to by running the "list_bluexp_accts" script
found in this GitHub repository: https://github.com/NetApp/FSx-ONTAP-samples-scripts/tree/main/Management-Utilities/Workload-Factory-API-Samples\n\n'
required_options["LAMBDA_ARN"]='Error: The ARN of the AWS Lambda function is required to run this script.
You can get the ARN from the AWS console.\n\n'
required_options["NAME"]='Error: You must provide a name for the link to register.\n\n'

check_required_options
#
# Check that the required commands are available.
for cmd in jq curl; do
  if ! command -v $cmd &> /dev/null; then
    echo "Error: The required command '$cmd' was not found. Please install it." >&2
    exit 1
  fi
done
#
# Get the token to use for the API call.
token=$(get_token)
if [ -z "$token" ]; then
  echo "Error: Failed to obtain an access token. Exiting." >&2
  exit 1
fi
run_curl POST "$token" "https://api.workloads.netapp.com/accounts/${BLUEXP_ACCOUNT_ID}/links/v1/links" $tmpout $tmperr '{"type": "lambda", "name": "'${NAME}'", "arn": "'${LAMBDA_ARN}'"}'
