#!/bin/bash
#
# This script is used to show the FSx for ONTAP credentails that Workload
# Factory has for the specified file system.
#
# It is dependent on the 'wf_utils' file that is included in this repo. That
# file contains the 'get_token' function that is used to obtain a valid
# access token that is needed to run the Workload Factory APIs. The file needs
# to either be in the command search path or in the current directory.
################################################################################

################################################################################
# Display usage information then exits the script.
################################################################################
usage() {
  cat >&2 <<EOF

Usage: $(basename $0) -t refresh_token -a blueXP_account_ID -f filesystem_ID [-o]
This script is used to show the FSx for ONTAP credentails that Workload
Factory has for the specified file system.

Where: refresh_token - Is a refresh token used to obtain an access token needed
                       to run the Workload Factory APIs. You can obtain a refresh
                       token by going to https://services.cloud.netapp.com/refresh-token
       blueXP_account_ID - is the BlueXP account ID. You can find all the accounts
                           you have access to by running the "list_bluexp_accts" script
       filesystem_ID - is the ID of the FSx for ONTAP file system you want to list the credentials for.
                       You can find this ID by running the "list_filesystems" script

Instead of passing parameters on the command line, you can set the
following environment variables:

    export REFRESH_TOKEN=<refresh_token>
    export BLUEXP_ACCOUNT_ID=<blueXP_account_ID>
EOF
  exit 1
}

################################################################################
# Main logic starts here.
################################################################################
tmpout=$(mktemp /tmp/show_fsxn_credentials-out.XXXXXX)
tmpout2=$(mktemp /tmp/show_fsxn_credentials-out2.XXXXXX)
tmperr=$(mktemp /tmp/show_fsxn_credentials-err.XXXXXX)
trap 'rm -f $tmpout $tmpout2 $tmperr' exit
#
# Source the wf_utils file.
wf_utils=$(command -v wf_utils)
if [ -z "$wf_utils" ]; then
  if [ ! -x "./wf_utils" ]; then
    cat >&2 <<EOF
Error: The 'wf_utils' script was not found in the current directory or in the command search path.
It is required to run this script. You can download it from:
https://github.com/NetApp/FSx-ONTAP-samples-scripts/tree/main/Management-Utilities/Workload-Factory-API-Samples
EOF
    exit 1
  else
    wf_utils=./wf_utils
  fi
fi
. "$wf_utils"
#
# Process command line options.
#
# Set defaults.
filter="filter=$(urlencode "type eq 'AWS_ASSUME_ROLE'")"
while getopts "ht:a:of:" opt; do
  case $opt in
    t) REFRESH_TOKEN="$OPTARG" ;;
    a) BLUEXP_ACCOUNT_ID="$OPTARG" ;;
    f) FILESYSTEM_ID="$OPTARG" ;;
    o) filter="";; # No filter, list all credentials.
    *) usage ;;
  esac
done
#
# Declare an array of required options and the error message to display if they are not set.
declare -A required_options
required_options["REFRESH_TOKEN"]='Error: A BlueXP refresh tokon is required to run this script. It can be obtain from this web page:
  https://services.cloud.netapp.com/refresh-token\n\n'
required_options["BLUEXP_ACCOUNT_ID"]='Error: A BlueXP account ID is required to run this script.
You can get the list of accounts you have access to by running the "list_bluexp_accts" script
found in this GitHub repository: https://github.com/NetApp/FSx-ONTAP-samples-scripts/tree/main/Management-Utilities/Workload-Factory-API-Samples\n\n'
required_options["FILESYSTEM_ID"]='Error: The ID of the FSxN file system is required.\n\n'

check_required_options
#
# Check that the required commands are available.
for cmd in curl jq; do
  if ! command -v $cmd > /dev/null 2>&1; then
    echo "Error: The required command '$cmd' was not found. Please install it." >&2
    exit 1
  fi
done

token=$(get_token)
if [ -z "$token" ]; then
  echo "Error: Failed to obtain an access token. Exiting." >&2
  exit 1
fi

jq_query='.credentials | "\(.ip),\(.userName),\(.password),\(.isSecret)"'

run_curl GET "$token" "https://api.workloads.netapp.com/accounts/${BLUEXP_ACCOUNT_ID}/fsx/v2/file-systems/${FILESYSTEM_ID}/ontap-credentials" $tmpout $tmperr
if jq -r "$jq_query" $tmpout > $tmpout2 2> $tmperr; then
  :
else
  echo "Failed to parse the output from the API."
  cat $tmperr >&2
  exit 1
fi
#
# Check to see if there are more.
nextToken=$(jq -r '.nextToken' $tmpout)
while [ "$nextToken" != "null" ]; do
  run_curl GET "$token" "https://api.workloads.netapp.com/accounts/${BLUEXP_ACCOUNT_ID}/fsx/v2/file-systems/${FILESYSTEM_ID}/ontap-credentials?nextToken=$nextToken" $tmpout $tmperr
  if jq -r "$jq_query" $tmpout >> $tmpout2 2> $tmperr; then
    :
  else
    echo "Failed to parse the output from the API."
    cat $tmperr >&2
    exit 1
  fi
  nextToken=$(jq -r '.nextToken' $tmpout)
done
column -t -s, -N "IP,UserName,Password,Is Secret" $tmpout2
