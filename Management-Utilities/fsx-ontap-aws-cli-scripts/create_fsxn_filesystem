#!/bin/bash
################################################################################
# THIS SOFTWARE IS PROVIDED BY NETAPP "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL NETAPP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR'
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
################################################################################
#
# This script is used to create an FSxN filesystem.
################################################################################

################################################################################
#  This function just outputs the usage information and exits.
################################################################################
usage () {
cat 1>&2 <<EOF
Usage: $(basename $0) -name fileSystemName -subnetID1 subnetID1 -subnetID2 subnetID2 [-region region] [-type availability] [-size size] [-security-group-id securityGroupID] [-throughput throughput] [-numberPairs numberPairs] [-endpointIPrange CIDR] [-wait]
where
  fileSystemName: Is the name you want to assign the file system.
  subnetID1: Is the subnet ID of the preferred subnet you want the file system to be accessible from.
  subnetID2: Is the subnet ID of the standby subnet you want the file system to be accessible from. Only allowed for multi availability zone deployments.
  security-group-id: Is the security ID that you want applied to the ENIs that are assigned to the file system.
  region: Is the AWS region where the FSxN file system will reside.
  availability: Specifies whether the HA pair should be spread across 'single' or 'multiple' availability zones. Valid settings are 'single' or 'multi' (default).
  size: Is size, in gigabytes, you want the file system to be. Minimum is 1024 per number of HA pairs. Default is 1024.
  throughput: Is the throughput capacity you the file system to have. Valid Gen1 numbers are 128, 256, 512, 1024, 2048, and 4096. Valid Gen2 numbers are 384, 768, 1536, 3072, and 6144. Default is 128.
  numberPairs: Is the number of HA pairs you want the file system to have. Can only be greater than 1 with throupghput numbers of 1536, 3072, and 6144. Default is 1.
  CIDR: Is an address range that the system management, and data access, IPs will be allocated from. It is only allowed for multi availability zone deployments.
  -wait: Forces the script to wait until the file system is created before returning.
EOF
  exit 1
}

################################################################################
# Main logic starts here.
################################################################################
tmpout=/tmp/fsx_fs_create.$$
trap 'rm -f $tmpout' exit
#
# Set the maximum number of times to check that the file system was created.
# Multiple it by the SleepTime set below to the total amount of time allowed.
MaxIterations=180
#
# Set the number of seconds to wait between checks that the file system
# has been created.
SleepTime=15
#
# Possible throughput values
throughputValuesGen1=(128 256 512 1024 2048 4096)
throughputValuesGen2=(384 768 1536 3072 6144)
throughputValuesMultiHAPairs=(1536 3072 6144)

integerRegex='^[0-9]+$'

################################################################################
# This function is used to see if the first value passed is in one of the
# other parameters passed.
################################################################################
is_in(){

  local value=$1
  shift
  for i in "$@"; do
    if [ $i == $value ]; then
      return 0
    fi
  done
  return 1
}

for cmd in jq aws; do
  if which $cmd > /dev/null 2>&1; then
    :
  else
    echo "Error, the '$cmd' is required to run this script." 1>&2
    exit 1
  fi
done
#
# Set some defaults.
size=1024
throughput=128
region=$(aws configure list | egrep '^.*egion ' | awk '{print $2}')
securityGroupOption=""
endpointips=""
availType=multi
numPairs=1
waitForCompletion=false
#
# Process command line arguments.
while [ ! -z "$1" ]; do
  case $(echo "$1" | tr [A-Z] [a-z]) in
    -name|--name) fileSystemName="$2"
      shift
      ;;
    -region|--region) region="$2"
      shift
      ;;
    -size|--size) size="$2"
      if ! [[ "$size" =~ $integerRegEx ]]; then
          echo "-size must be an integer."
          usage
      fi
      shift
      ;;
    -subnetid1|--subnetid1) subnetID1="$2"
      shift
      ;;
    -subnetid2|--subnetid2) subnetID2="$2"
      shift
      ;;
    -security-group-id|--security-group-id) securityGroupOption="--security-group-ids $2"
      shift
      ;;
    -type|--type)
      availType=$2
      if [ $availType != "single" -a $availType != "multi" ]; then
        echo "-type must be 'single' or 'multi'." 1>&2
        usage
      fi
      shift
      ;;
    -throughput|--throughput) throughput="$2"
      if ! [[ "$throughput" =~ $integerRegEx ]]; then
          echo "-throughput must be an integer."
          usage
      fi
      shift
      ;;
    -endpointiprange|--endpointiprange)
      endpointips='"EndpointIpAddressRange": "'$2'",'
      shift
      ;;
    -numberpairs|--numberpairs) numPairs="$2"
      if ! [[ "$numPairs" =~ $integerRegEx ]]; then
          echo "-numPairs must be an integer."
          usage
      fi
      shift
      ;;
    -wait|--wait)
      waitForCompletion=true
      ;;
    -h|-help|--help)
      usage
      ;;
    *) echo "Error, unknown option $1." 1>&2
      usage
      ;;
  esac
  shift
done

if is_in "$throughput" "${throughputValuesGen1[@]}"; then
  if [ $availType == "single" ]; then
    azType="SINGLE_AZ_1"
  elif [ $availType == "multi" ]; then
    azType="MULTI_AZ_1"
  else
    echo "Error, unknown availability type '$availType'."
    usage
  fi
elif is_in "$throughput" "${throughputValuesGen2[@]}"; then
  if [ $availType == "single" ]; then
    azType="SINGLE_AZ_2"
  elif [ $availType == "multi" ]; then
    azType="MULTI_AZ_2"
  else
    echo "Error, unknown availability type '$availType'."
    usage
  fi
else
  echo "Error, unsupported throughput value '$throughput'."
  usage
fi
#
# Ensure all the required parameters have been provided.
if [ -z "$fileSystemName" ]; then
  echo "Error, you must specify a file system name." 1>&2
  usage
fi

if [ -z "$subnetID1" -o "$azType" == "MULTI_AZ_1" -a -z "$subnetID2" -o "$azType" == "MULTI_AZ_2" -a -z "$subnetID2" ]; then
  echo "Error, you must specify only subnetID1 for a single availability zone deployments or both subnetID1 and subnetID2 for a multi availability zone deployments." 1>&2
  usage
fi

if [[ $azType == *"SINGLE_AZ"* ]]; then
  if [ ! -z "$endpointips" ]; then
    echo "Error, you cannot specify Endpoint IP address range when deploying in a single availability zone." 1>&2
    exit 1
  fi

  if [ ! -z "$subnetID2" ]; then
    echo "Error, you can't specify a second subnet with deploying in a single availability zone." 1>&2
    exit 1
  fi
fi

if [ $numPairs -gt 1 ]; then
  if ! is_in "$throughput" "${throughputValuesMultiHAPairs[@]}"; then
    echo "Error, you can only specify more than one HA pair with throughput values of 1536, 3072, and 6144." 1>&2
    usage
  fi

  if [ $azType != "SINGLE_AZ_2" ]; then
    echo "Error, you can only specify more than one HA pair with a single availability zone deployment." 1>&2
    usage
  fi
fi

minSize=$((1024*numPairs))
if [ $size -lt $minSize ]; then
  echo "Error, the size must be at least $minSize for $numPairs HA pairs. In other words 1024 per HA pair." 1>&2
  usage
fi

echo aws fsx create-file-system --output=json --file-system-type ONTAP --storage-capacity $size --subnet-ids $subnetID1 $subnetID2 --storage-type SSD --tags "Key=Name,Value=$fileSystemName" $securityGroupOption --ontap-configuration '{
  "PreferredSubnetId": "'$subnetID1'",
  '$endpointips'
  "DeploymentType": "'$azType'",
  "HAPairs": '$numPairs',
  "ThroughputCapacityPerHAPair": '$throughput'}' --region=$region 
#  "ThroughputCapacityPerHAPair": '$throughput'}' --region=$region > $tmpout 2>&1
exit
if [ $? != "0" ]; then
  echo "Failed to create FSxN file system." 1>&2
  cat $tmpout 1>&2
  exit 1
else
  status=$(jq -r .FileSystem.Lifecycle $tmpout 2> /dev/null)
  if [ "$status" == "CREATING" -o "$status" == "PENDING" ]; then
    fsid=$(jq -r .FileSystem.FileSystemId $tmpout)
    printf "File system '$fileSystemName' ($fsid) is being created."
    if [ $waitForCompletion == "true" ]; then
      i=0
      while [ $i -lt $MaxIterations ]; do
        aws fsx describe-file-systems --file-system-ids $fsid --output=json --region=$region > $tmpout 2>&1
        if [ $? -eq 0 ]; then
          status=$(jq -r '.FileSystems[0].Lifecycle' $tmpout 2> /dev/null)
          if [ "$status" == "AVAILABLE" ]; then
            printf "\nFile system '$fileSystemName' ($fsid) has been created.\n"
            break
          fi
          if [ "$status" != "CREATING" -a "$status" != "PENDING" ]; then
            printf "\nError, failed to create the file system. Status = $status\n" 1>&2
            reason="$(jq -r '.FileSystems[0].LifecycleTransitionReason.Message' $tmpout 2> /dev/null)"
            if [ ! -z "$reason" ]; then
              echo "Reason: $reason" 1>&2
            else
              cat $tmpout 1>&2
            fi
            exit 1
          fi
          printf "."
        else
          printf "\nError, failed to get the file system status.\n" 1>&2
          cat $tmpout 1>&2
          exit 1
        fi
        sleep $SleepTime
        let i+=1
      done
      if [ $i -ge $MaxIterations ]; then
        printf "\nFailed to create file system('$fsid'). Taking too long.\n" 1>&2
        exit 1
      fi
      exit 0
    else
      echo
    fi
  else
    echo "Unknown status '$status'. Complete output returned from the AWS api:" 1>&2
    cat $tmpout 1>&2
    exit 1
  fi
fi
exit 0
