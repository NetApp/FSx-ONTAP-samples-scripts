#!/bin/bash
################################################################################
# THIS SOFTWARE IS PROVIDED BY NETAPP "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL NETAPP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR'
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
################################################################################
#
# This script is used to create an FSxN filesystem.
################################################################################

################################################################################
#  This function just outputs the usage information and exits.
################################################################################
usage () {
cat 1>&2 <<EOF
Usage: $(basename $0) -name fileSystemName -subnetID1 subnetID1 -subnetID2 subnetID2 [-region region] [-type availability] [-size size] [-security-group-id securityGroupID] [-throughput throughput] [-endpointIPrange CIDR] [-wait]
where
  fileSystemName: Is the name you want to assign the file system.
  subnetID1: Is the subnet ID of the preferred subnet you want the file system to be accessible from.
  subnetID2: Is the subnet ID of the standby subnet you want the file system to be accessible from. Only allowed for multi availability zone deployments.
  security-group-id: Is the security ID that you want applied to the ENIs that are assigned to the file system.
  region: Is the AWS region where the FSxN file system will reside.
  availability: Specifies whether the HA pair should be spread across 'single' or 'multiple' availability zones. Valid settings are 'Single' or 'Multi' (default).
  size: Is size, in gigabytes, you want the file system to be. Minimum and the default is 1024.
  throughput: Is the throughput capacity you the file system to have. Valid numbers are 128, 256, 512, 1024, 2048, and 4096. Default is 128.
  CIDR: Is an address range that the system management, and data access, IPs will be allocated from. It is only allowed for multi availability zone deployments.
  --wait: Forces the script to wait until the file system is created before returning.
EOF
  exit 1
}

################################################################################
# Main logic starts here.
################################################################################
tmpout=/tmp/fsx_fs_create.$$
trap 'rm -f $tmpout' exit
#
# Set the maximum number of times to check that the file system was created.
# Multiple it by the SleepTime set below to the total amount of time allowed.
MaxIterations=180
#
# Set the number of seconds to wait between checks that the file system
# has been created.
SleepTime=15

for cmd in jq aws; do
  if which $cmd > /dev/null 2>&1; then
    :
  else
    echo "Error, the '$cmd' is required to run this script." 1>&2
    exit 1
  fi
done
#
# Set some defaults.
size=1024
throughput=128
region=$(aws configure list | egrep '^.*egion ' | awk '{print $2}')
securityGroupOption=""
endpointips=""
azType="MULTI_AZ_1"
waitForCompletion=false
#
# Process command line arguments.
while [ ! -z "$1" ]; do
  case $(echo "$1" | tr [A-Z] [a-z]) in
    -name|--name) fileSystemName="$2"
      shift
      ;;
    -region|--region) region="$2"
      shift
      ;;
    -size|--size) size="$2"
      if ! [[ "$size" =~ '^[0-9]+$' ]]; then
          echo "-size must be an integer."
          usage
      fi
      if [ "$size" -le 1024 ]; then
        usage
      fi
      shift
      ;;
    -subnetid1|--subnetid1) subnetID1="$2"
      shift
      ;;
    -subnetid2|--subnetid2) subnetID2="$2"
      shift
      ;;
    -security-group-id|--security-group-id) securityGroupOption="--security-group-ids $2"
      shift
      ;;
    -type|--type)
      if [ "$(echo $2 | tr [A-Z] [a-z])" == "single" ]; then
        azType="SINGLE_AZ_1"
      elif [ "$(echo $2 | tr [A-Z] [a-z])" == "multi" ]; then
        azType="MULTI_AZ_1"
      else
        echo "Error, known availability type '$2'."
        usage
      fi
      shift
      ;;
    -throughput|--throughput) throughput="$2"
      if ! [[ "$throughput" =~ '^[0-9]+$' ]]; then
          echo "-throughput must be an integer."
          usage
      fi
      if [ "$througput" != "128" -a "$througput" != "256" -a "$throughput" != "512" -a "$throughput" != "1024" -a "$throughput" != "2048" -a "$throughput" != "4096" ]; then
          echo "-throughput must be 128 or 256 or 512 or 1024 or 2048 or 4096."
          usage
      fi
      shift
      ;;
    -endpointiprange|--endpointiprange)
      endpointips='"EndpointIpAddressRange": "'$2'",'
      shift
      ;;
    -wait|--wait)
      waitForCompletion=true
      ;;
    -h|-help|--help)
      usage
      ;;
    *) echo "Error, unknown option $1." 1>&2
      usage
      ;;
  esac
  shift
done
#
# Ensure all the required parameters have been provided.
if [ -z "$fileSystemName" -o -z "$subnetID1" -o "$azType" == "MULTI_AZ_1" -a -z "$subnetID2" ]; then
  echo "Missing arguments." 1>&2
  usage
  exit 1
fi
if [ $azType == "SINGLE_AZ_1" ]; then
  if [ ! -z "$endpointips" ]; then
    echo "Error, you can not specify Endpoint IP address range when deploying in a single availability zone." 1>&2
    exit 1
  fi

  if [ ! -z "$subnetID2" ]; then
    echo "Error, you can't specify a second subnet with deploying in a single availability zone." 1>&2
    exit 1
  fi
fi

aws fsx create-file-system --output=json --file-system-type ONTAP --storage-capacity $size --subnet-ids $subnetID1 $subnetID2 --storage-type SSD --tags "Key=Name,Value=$fileSystemName" $securityGroupOption --ontap-configuration '{
  "PreferredSubnetId": "'$subnetID1'",
  '$endpointips'
  "DeploymentType": "'$azType'",
  "ThroughputCapacity": '$throughput'}' --region=$region > $tmpout 2>&1

if [ $? != "0" ]; then
  echo "Failed to create FSxN file system." 1>&2
  cat $tmpout 1>&2
  exit 1
else
  status=$(jq -r .FileSystem.Lifecycle $tmpout 2> /dev/null)
  if [ "$status" == "CREATING" -o "$status" == "PENDING" ]; then
    fsid=$(jq -r .FileSystem.FileSystemId $tmpout)
    printf "File system '$fileSystemName' ($fsid) is being created."
    if [ $waitForCompletion == "true" ]; then
      i=0
      while [ $i -lt $MaxIterations ]; do
        aws fsx describe-file-systems --file-system-ids $fsid --output=json --region=$region > $tmpout 2>&1
        if [ $? -eq 0 ]; then
          status=$(jq -r '.FileSystems[0].Lifecycle' $tmpout 2> /dev/null)
          if [ "$status" == "AVAILABLE" ]; then
            printf "\nFile system '$fileSystemName' ($fsid) has been created.\n"
            break
          fi
          if [ "$status" != "CREATING" -a "$status" != "PENDING" ]; then
            printf "\nError, failed to create the file system. Status = $status\n" 1>&2
            cat $tmpout 1>&2
            exit 1
          fi
          printf "."
        else
          printf "\nError, failed to get the file system status.\n" 1>&2
          cat $tmpout 1>&2
          exit 1
        fi
        sleep $SleepTime
        let i+=1
      done
      if [ $i -ge $MaxIterations ]; then
        printf "\nFailed to create file system('$fsid'). Taking too long.\n" 1>&2
        exit 1
      fi
      exit 0
    else
      echo
    fi
  else
    echo "Unknown status '$status'. Complete output returned from the AWS api:" 1>&2
    cat $tmpout 1>&2
    exit 1
  fi
fi
exit 0
