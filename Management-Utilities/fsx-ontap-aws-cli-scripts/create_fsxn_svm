#!/bin/bash
################################################################################
# THIS SOFTWARE IS PROVIDED BY NETAPP "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL NETAPP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR'
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
################################################################################
#
# This script is used to create an FSxN virtual storage machine under the
# specified FSxN "filesystem".
################################################################################

################################################################################
#  This function just outputs the usage information and exits.
################################################################################
usage () {
cat 1>&2 <<EOF
Usage: $(basename $0) -n svmName  [-f fileSystemName] [-i fileSystemId] [-r region] [-w]
Where:
  svmName: Is the name you want to assign the storage virtual machine.
  fileSystemName: Is the name of the FSxN file system where you want the SVM created. This option is mutually exclusive with the -i option.
  fileSystemID: Is the file system ID where you want to create the SVM on. This option is mutually exclusive with the -f option.
  region: Is the AWS region where the FSxN file system resides.
  -w : Wait for the SVM to be created before returning.
EOF
  exit 1
}

################################################################################
# Main logic starts here.
################################################################################
tmpout=/tmp/create_svm.$$
trap 'rm -f $tmpout' exit

if which aws jq > /dev/null 2>&1; then
  :
else
  echo "Error, both the 'aws' and 'jq' commands are required to run this script." 1>&2
  exit 1
fi
#
# Set some defaults.
region=$(aws configure list | egrep '^.*egion ' | awk '{print $2}')
waitForCompletion=false
maxIterations=24
sleepTime=5
#
# Process command line arguments.
while getopts "hwn:r:f:i:" option; do
  case $option in
    n) svmName=$OPTARG
      ;;
    r) region=$OPTARG
      ;;
    f) fileSystemName=$OPTARG
      ;;
    i) fsid=$OPTARG
      ;;
    w) waitForCompletion=true
      ;;
    *) usage
      ;;
  esac
done

if [ ! -z "$fileSystemName" -a ! -z "$fsid" ]; then
  echo "Error, you can only specify the -i OR the -f option. Not both." 1>&2
  usage
fi
#
# Ensure all the required parameters have been provided.
if [ -z "$svmName" -o -z "$fileSystemName" -a -z "$fsid" ]; then
  echo "Error, missing required arguments." 1>&2
  usage
fi
#
# Get the file system id from the file system name.
if [ -z "$fsid" ]; then
  fsid=$(aws fsx describe-file-systems --region $region --output=json 2> /dev/null | jq -r ".FileSystems[] | if((.Tags[] | select(.Key == \"Name\") .Value) == \"${fileSystemName}\") then .FileSystemId else empty end" 2> /dev/null)
fi

if [ -z "$fsid" ]; then
  echo "Error, could not find the file system with name '${fileSystemName}' in region $region." 1>&2
  exit 1
fi
#
# Create the SVM
aws fsx create-storage-virtual-machine --name $svmName --region=$region --file-system-id "$fsid" --output=json > $tmpout 2>&1

if [ $? != "0" ]; then
  echo "Failed to create storage virtual machine." 1>&2
  cat $tmpout 1>&2
  exit 1
else
  status=$(jq -r .StorageVirtualMachine.Lifecycle $tmpout 2> /dev/null)
  if [ "$status" == "CREATING" -o "$status" == "PENDING" ]; then
    svmId=$(jq -r '.StorageVirtualMachine.StorageVirtualMachineId' $tmpout)
    printf "Stroage Virtaul Machine '$svmName'($svmId) is being created."
    #
    # Wait for the svm to be deleted.
    if [ $waitForCompletion == true ]; then
      i=0
      while [ $i -lt $maxIterations ]; do
        aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids $svmId --output=json --region=$region > $tmpout 2>&1
        if [ $? -eq 0 ]; then
          status=$(jq -r '.StorageVirtualMachines[0].Lifecycle' $tmpout 2> /dev/null)
          if [ "$status" == "CREATED" ]; then
            printf "\nStorage Virtual Machine '$svmName'($svmId) has been created.\n"
            break
          fi
          if [ "$status" != "CREATING" -a "$status" != "PENDING" ]; then
            printf "\nError, failed to create SVM with SVM ID '$svmId'. Status = $status\n" 1>&2
            reason="$(jq -r '.StorageVirtualMachines[0].LifecycleTransitionReason.Message' $tmpout)"
            if [ ! -z "$reason" ]; then
              echo "Reason: $reason" 1>&2
            else
              cat $tmpout 1>&2
            fi
            exit 1
          fi
        else
          printf "\nError, failed to get status of SVM with SVM ID '$svmId'.\n" 1>&2
          cat $tmpout 1>&2
          exit 1
        fi
        printf "."
        sleep $sleepTime
        let i+=1
      done
      if [ $i -ge $maxIterations ]; then
        printf "\nFailed to create SVM with SVM ID of '$svmID'. Taking too long.\n" 1>&2
        exit 1
      fi
    else
      printf "\n"
    fi
  else
    echo "Unknown status '$status'. Complete output returned from the AWS api:" 1>&2
    cat $tmpout 1>&2
    exit 1
  fi
fi
exit 0
